apiVersion: 0.5.0
meta:
  name: traffic-object-detect
  version: 0.1.0
  namespace: traffic

config:
  converter: json

types:
  event-info:
    type: object
    properties:
      counter: 
        type: u32
      event_timestamp: 
        type: string
      image_binary: 
        type: string
      url: 
        type: string
  traffic-img:
    type: object
    properties:
      camera: 
        type: string
      event: 
        type: event-info
  traffic-img-proc:
    type: object
    properties:
      camera: 
        type: string
      event: 
        type: event-info 
      boundbox: 
        type: string
topics:
  traffic-camera:
    schema:
      value:
        type: traffic-img
  traffic-boxes:
    schema:
      value:
        type: traffic-img-proc

services:
  dostuff:
    sources:
      - type: topic
        id: traffic-camera 
    transforms:
      - operator: map 
        dependencies:
          - name: sdf-http
            git: "https://github.com/infinyon/sdf-http-guest"
            tag: "v0.4.0"
          - name: serde_json
            version: "1.0.60"
          - name: base64
            version: "0.21"
        run: |
          fn queryyolo(obj:TrafficImg) -> Result<TrafficImgProc> {
            use sdf_http::http::{Request, header};
            use serde_json::Value;         
            use base64::{Engine as _, alphabet, engine::{self, general_purpose}};

            let url = "https://api-inference.huggingface.co/models/hustvl/yolos-tiny";
            let token = "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";
            //let token = std::env::var("hg_apikey")?;
            //let token1 = std::env::var("hg_apikey")?;
            //let image_binary = base64::decode(&obj.event.image_binary);
            let image_binary= general_purpose::STANDARD
                         .decode(&obj.event.image_binary).unwrap();
            //let image_binary = obj.event.image_binary;

            let request = Request::builder()
                .method("POST")
                .uri(url)
                .header(header::CONTENT_TYPE, "application/json")
                .header(header::AUTHORIZATION, format!("Bearer {}", token))
                .body(image_binary)?;
            let response = sdf_http::blocking::send(request)?;
            let response_str = String::from_utf8(response.into_body())?;

            Ok(TrafficImgProc{
                camera: obj.camera,
                event: EventInfo{
                  counter: obj.event.counter,
                  event_timestamp: obj.event.event_timestamp,
                  image_binary: "".to_string(),
                  //image_binary: std::env::var("hg_apikey")?,
                  url: obj.event.url,
                },
                boundbox: response_str
            })  
          }
    sinks:
      - type: topic
        id: traffic-boxes
